# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-10 15:16+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# ab1699328ab94bc89d9d2c932a1166ba
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# fce3fc5de25e49b9bc157d3f58ad56d5
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# 7b0d35cb3f5b41c788fd86880fce720f
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# bf478ff874044fbb80e4fc140a5e1f16
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# e0ec3940a1984bcc9695ddd7e770e26e
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# 8b66528311e943abbd006a6bf2295a65
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# 5b162c92e88f4b1fb77f16fc0f9e7463
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# e6f8bddc27fb4097af31f78f226351af
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# f76a2e5ea63d45d0af9cde000c20add2
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# 6ea3b2f9d9b54eeb92415d9778d4cbff
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# e52a112b913647e3907581c991c53da3
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# 85935f07b0d3436c97ce8d89b87cf928
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# 93d3b6c436b046b7aa204dc86eb8aa65
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# 6af3a112bd4746cc8a1856cccb57b141
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# d224c90e7b2542f58054e6a24059d157
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# ea3bf49dc66a46dba9e6483f734e8075
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 476c7847b77d4153a6ce32e9195171b4
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 61971e11cae841bd95ae3d403143dfc3
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# 527e54ee9c6d4b64ba750c1a6e3513f2
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# a921a88898c940b1b0c6bcb7c95240f5
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# b8190ab7012e40168b7fa7714975e47a
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# 829c08f77d67484a94a41dc8c4a9ce74
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# e25c5e5a05e846bab4a9348bb433e521
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:112
# 72ad5193c54740cf9eb735d1df326854
msgid "You should have noticed that:"
msgstr ""

#: ../../postgres/adding_data.rst:110
# 44618a3c23ed43d38e5af72e480b7f47
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# f68a39ff75f14283962d62b99c589e1c
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 5a75e3b5c8b642039a0763adc5f28a6d
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# e9e6f475c8de48efb12f62ebe05fc27e
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 0cbea11d864c4995a1211e1aa8b41643
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 0dbe210c52a04e2a949d2c5766b4f9e7
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# cc72e43dfed34dfa869041ba4cf66a55
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# 0feefac7fca54f12986cb8b73f81d1a3
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# ecf45d637e654196855ee49212c14293
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# 707cc1aa4e76460a9b857a038ba0d2bb
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# 0c4fa2e214b544528269be59942ba5cd
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# b2569013f05440cfbe81efe6cd0f266c
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# c0f78116c4fe47c4a00c914661239265
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# 8c26f79ab2c14818951b59dd1dc9f474
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# 9b3f6a87fb4b4dec8b883bfa7c522e61
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# f8896861dbfe4d2eb1bdd7fe893d8593
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 6ba55a5d1224431aaa3c286da4e35e9d
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 19ebd5800f7f49db9fab8d8cb45b3462
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# 2b9ca79b030c483185118e12044dfffd
# e94f39669b004a359554a9cfd5e94e43
# 123e27a5da0648a1b09daf8e5ae0b322
# 052c13011d96442c842784fbdea66c04
# c54167a46a09428d9308f8a979027997
# 0e538bf925fd41d6927ff6b5e762af14
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 07452a5849b94270ba250f7417084f97
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# 0c6f27e7f7274e24a78a505b117e082c
# 74a25b4dd2384265bfd78239f97be510
# 37de75588eb94d2a9cada458e75dccc7
# 78427364414842b08a5107823c3ed217
# 1dba5cd91ce64e90b1e1655fcc43ed38
# dfd04dd8095e4682b4f133cfa53a8db2
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# d3f12ec5fdc6464c86dc04ad92a77760
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# 8b2c8d5080514652a1bcc166f4c03c4b
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# c832e3c39d1e4abf9021bf368e6dc4ea
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# 70e1a6e315dd4f58acda50727fb89b4f
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# bea9a2a67c4746bb970457b440ba4dfd
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# 39ea0aaa4f64429a9086f2daf539a505
# 945cf3ce5daa4888a95d2b65e04fec24
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 2e6efbb4cdf940e48b977477c2143dc9
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# 7c7c9c167b3144a48961f515d4932903
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# 2ad573eab8dc41ffb77c1cb5a13e6b11
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# c96319def08040f8ba597308f46078a3
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 59f58cfa77f241339a3fab8f6ecd9579
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# e5983841b18a436aaa8dfba333b42094
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# 41a1624d06cf44a6a7dfd0e0d8ad8ce2
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# 9f8fd03fcb9a4bcf8454b2fa1a22e157
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# 0fcf142dd7564638806ab7219b9c1f18
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# 36333e8d204a4f999fecdb39e895e64e
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# af7523ab67f64da294b642eefb5fe18e
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# 28f39b0234f44856a36e550840c12b6b
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 0a8ce2efcec346999f375620fc1ae4c9
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# 17fb1aa621354b99a4f0d9c080e68d74
# 8b038c055eb0403ca06378a6ce0bc86a
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# bfcebc0bb97644c896460d054ecfd5c9
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# d614a99b5e7943e4b5b6a7902b0fa0a4
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# 99d145cfcbb8476ea2124f6ebf5c76ae
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# 8b9b5ae1b1334617bb57974fa775f099
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# e7d9f0b98c1f4d44bc580cbb519e0d7f
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 2a5a9c5e0a1449789167b5c286ee5a45
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# cbe97b548a92458e8a6ddf26500b8bff
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 9693c2713ed04ada9b2e89049780c677
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# 65600ec2c7cb42969f1b2567271b89bf
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# c3ba24b1f2644112950a5fa0164bd4d7
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 978964bac642464692097db0fe089d9b
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# fd537b8edad34c3b8eabe9a949c6808c
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# 25039fa6b9bc40ffb10788bca1709327
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# f5962e1d44d6451e949bb7a9b82debda
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# f8f1f8c8877d4622b272c593e37c156e
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# c3cd452865dd4dc1b0df9b48d60fd938
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# d5f5bb2939334b4e892a4e38164365d0
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# a299e3b9b39f44c1925b8a1527996eb5
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# e6db49184d694593b983df06d924794f
# 8fe1307911dc41b496fa5ab18a475591
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 048d53bcf1cf49c3b42dafaa3b56cc1b
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# bde906c2bd264df5af28764ae3007ab9
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# 137cb2e54bc74d8aa9d752e6f94a90eb
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# 1728b98156854f2f928d8c6f2b817136
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# 1c364301acc04f16892c15e65db54d18
# 5d73728515994d849ad6fff3e698bfb9
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# 7baf1c633e3f45a6a063202698f426dc
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# af9e67cbc1fa42f59e8a7b07178b194e
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# 58f4104afb724239a64bae47bb998818
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# 7a43b949df5f4efd8a2c36ce21c801cf
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:338
# 625f6349ba9f4948ba1ab61f701a1a49
msgid "There are two ways to do this:"
msgstr ""

#: ../../postgres/data_model.rst:337
# 8f0e5cd342e6403cbb938e24a6e93012
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# b5b08fa87bd341c9974b5669a209d8e2
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 9ac36771bd924d319d27eda895278b81
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# 3fab3d5e4c2541ba9d539db0bb0f8d6f
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# dad6351c954043ea90dc500d459b27dd
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 144f38360c004cacb42a7959f9161b89
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 7896be9c1a4f4e22897f344f2efb881e
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# 1a5676c2cbe54da0ab1e94e8a8d4179d
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# 8af0f8255584492294fe75977ea73d2d
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# 9e8db52dacb0451a806f7f19219512dc
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# 3e6f3243d8d847049687ad5b3d29800f
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# 29044e22fb2546fe8815ac98a3873ca7
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# 1289dd07a69d4efc950b1bb3cf339899
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# 0b984885071f42fa83da0e2948e7c8e6
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 17737069cd66435da8c683d5af6b9042
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# 245fd8913cb64d92bf183a39ee4d52f5
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 5a30e1441a95439b84accb0d9a6dfaca
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# b5a64a2274aa4ab5ab1feba42a16a702
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# 4f76388ba3cc43c6940fde56986a3997
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# 54913a07fac44bb1bfabc7baf2443d28
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 8641c53188d74146adb9f8241304e7fb
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# 6b5346cf416d43af964ccc080538de7e
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 474b2a5347d8430ea0aa55112aa67130
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# 5cf6a6e4b71a44feb9c658c68799ad9e
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# 39fdc15919e945c7a20d75e031c5fb19
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# cc7863f268da4bb781ff89736a379050
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# b148d560a77448c99e26a0d570f5269a
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# c8d19a21e92141c9abcc58c3cc4b350f
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# 5f80fd3cf1034790bff555839d1cf5ff
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# 11bffbd4e6e04bacbd8530e2f6f28240
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 5085d1e3039f44b6aa6f4f3834d30aef
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# a4bbd511d1b74549aaa4786760ddca78
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# edf0c69729244c70b633c58725a8757f
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# c72a813c4bd045c1a74cfd7b68ad2308
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# e0e7a259cc894273819dd85025695ea1
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# 36744846fbdd48a69f901f9b31437073
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# 530fadd87cdd458f9c4538042ff68746
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 5ae78f39bef14b32b5b3509a1fbbc764
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# f8e848a60ca74db9831632f34f816824
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 428efc1796a748768f489717a2c507ca
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# f50a2ff98c7445fdb20c486ecde35999
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# a3a46ca4b5bc475992e35564f6529751
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 7be7fab402074c81ac4aa1ddb62c06b0
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# c611f8b4c6a14949ba3310106bb477d3
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 156174665cc4433182920109ec5080a6
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# 122b20f702e14fe59d0cbf63ad88f73b
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# 817cc1c67c8e42b9b3cf00c2309c540f
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# e9fbb19655134afa94e783ab84994a81
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 82a4771c9c0e4167a316c00857dceea1
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# 1bcbf464cd09488ba5dc4440b3d8ea21
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# e4c25c9ae6a64d529a3a9ecbd8f06780
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# ec11a79a161b45c097620f61cac3807d
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# cb68ae07c06e4834840979bd13a5521c
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# 3652045ecf414cec99e24e82f5d33bb5
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# 39e86433c7214eb08f476b2892d07701
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# 5c74370f50c6414081dd17f0b1fae8db
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 28e23d7811b8406c887bee1e58119a15
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 8fb539902a1244a884fcaa6bce1f853e
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# c10a40ba66004411b44122c21df6d815
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# 977a184849ca40c2863d5cde7d803811
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# 8bb55b1719724f94a01d925694ca1971
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# 9323428d45bb47d8834f86ea93ad3d58
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 26019b9028d0423bb787490af8155613
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# cd0437bac37140758ba6f37d90a3323d
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# 7ba2c5fd5dec49ec9748e92831b85285
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# bfd8d9c9046b449db65606426e76f995
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# 90bfcdf55a2a4b9da42699a3bead89c2
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# fe7344e9487843f5b5594675f0b9eecf
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# 9fa4c512ed2c4625a712ab19ac1a8a0a
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# b01d2c5594aa4882b67a577fda0d3a0c
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# 6a0b00a9523f49529c75ca7a15109ea4
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# fd9738cc11c2430cab3d17721b74a01d
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# fd374f2cdf934e549cdb134d86c990cf
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# 2584ab17bc94414fbe881d7b03a54908
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# 7b65d43f12a24d1caed013a3b8e36a5c
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# c34ecfbd9d844f268d8b757c640e2754
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# b8e0dadc5a534edf8124a190babdeaa8
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# 9632dae958614930ad2ff47c843e2886
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# fee27618670244ed820765aabb852dc9
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# 965c85ffcb7a4cb780003a40a1ff66d1
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# 2f8a99e2b479493983789f756ecccebe
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# db643a103bb2471f8062c7f4b83d2caf
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# d2a0266598924661b0368f9a77ae4770
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# ad31fc98571f40aaa552d1c5e4eb5b4a
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# 1a288ee5817b44ceb9349e3e3cd59ce9
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# 2da4a1ea4db94e6bb533e9e1ce6952f7
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# d267e2a2887246d2bc8b13a6737e5898
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# 8e2ed1411bbb4336a1ba47fb2cd710c4
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# b9115dad4c024d4d9e6b3a985bbf992c
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# fd3591e27b554098a387e57f77e1f2ff
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# e03a81631d7b412f9e3afdc70e497e2d
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# 265c29499e324fe78aca4c36535c344e
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# ed18e5b5976e402282eff1ccdabcb51d
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 8a91eaf8554a424d8f8bcdfcbe0cb8e2
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# eee5148430bb449c8952a90bb5015a06
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# b4163c31ccc84e6e833c33d56291b493
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 3104df22809d4df0b83a600b924cb03d
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 25a7da0cc3c145e9b794e0bb8210d2da
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# 14c33d65bdc64ef798bf64976fed13a5
# 4a583efeb7c64644a701a52a2a56db52
# 5aab772e5862483e929777f3df36dd53
# a4b2600a186a4c459810f691cbedc5c1
# 44aeab300b064e4793b93f3dca2d3984
# 09cbec5a0d664f9da86354b4bb8223a3
# a91b1dc1f62d4e0ebbad0629399eee0f
# f0adb449b4434130a412d49e54e5770f
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# 87dc459084954ad19b7cad73ef6cc0fd
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# 8c223050bb7340bd96215ed840cdfe24
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# b0a2d223e2974f2399e045f3f8412c9f
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 5667f0f88c6643438cf1701e97cff326
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# 6d7d20aac2a74f22a3d5fe211e11a7c8
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# c379e36f86044f94be0ad5f1aa085889
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# 7945c11267ea4cf0a4747b092c868def
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# be08b104dd3345b4a8890185203cfe48
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# 6cefc7a8e5ad4b5eb184c4bdff278587
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# e8c3e2ddd88b44d6be233bd3c27b5548
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# cb4235d139f445d0871749552dea69f3
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# 016ad6eecad34b65b11757202c9ca768
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# ab715812982746df878bf080263acd1f
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 701540ee90c841279757b192e9b424aa
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# 915a760dd392460e8c3683d9cdbcf33e
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 322e01f465f347bfacae1069faf77d57
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# 3573824888004c179949ac865990cfd1
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# b82c4116acf84c13ab20997f5e59e733
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# e131c74948a94419a05ad9e672724e2d
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# bfb54e0b5216444e909d6a58345d804e
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# b0eca2ad67f449b3b51a05fad067e635
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 0541bd8111a4448a85f0ba57156a7b22
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# 1097e5b75d3e42e1abe8c66d28e385d0
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# 3a31dfbd6756467c8ce4b1dc3a6ab29b
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 6353ba442fdc430a958ed70533510e7e
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# b4d206ac613843a085ca4a18f99c822b
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# 6814072c7283407480ea3c02b1f79007
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# e8c2c4c21f45488a9b529178e5227bf5
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# f02f4ab2d6e94f5d8b899f56057934ce
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# e3e33e97c22c47488a408795bc0366cf
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# 5dc9559bcaf44e4686423abeb9ed1c2e
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# 95f5d5ad14fa4d7aa9bd3809e029408a
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 276b47c512c44231be652423a4137588
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# 73aa902ad335410784a3e32a06ee9e87
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# fdbcf0631998409c870738a45e977e89
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# b31467c26350405196634d70b8dc3799
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# f2d618d5da9f4ab784ac614d0001ddbf
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# fe62d443609f4a9988a07a3bbfa0b3a9
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# 583f4086a3334f52af276487f4401dda
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# de5a41abb1eb4c8cb794b73f2aa7c789
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# 88299ea128f244289db2912b409cb51c
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# bad2af44df4a4639a4ca45acf4896d0f
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# d44bcf9cbd8f44c4bb2bdab63f535bd8
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# 4b03d83e17e04ec0a002754a486c5ea2
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# 2c2f80a36344428fa613db54c9c62303
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 9d9f1f8dc6864860b305b6e34520bf9e
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# 563f8ca430c44fdc9c6e563e85c206f8
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# 2eb7f1e7d73d48e69efe45fae050c87d
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# a844e08563c34e288f46d21670ed687d
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# f58ff2adc8974e758b86452e4d35ec49
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# f95f0f3d56d54edf839eafefacd43e8c
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 9fa8f55a250a4f92bebfda55d854ee4e
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# 2371b28d822247918b892d0140be96b0
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

